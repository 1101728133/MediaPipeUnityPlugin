diff --git a/mediapipe/util/BUILD b/mediapipe/util/BUILD
index 9347fc0..b42c20e 100644
--- a/mediapipe/util/BUILD
+++ b/mediapipe/util/BUILD
@@ -146,10 +146,20 @@ cc_library(
     ],
 )
 
+cc_library(
+    name = "asset_manager",
+    hdrs = ["asset_manager.h"],
+    deps = [
+        "//mediapipe/framework/port:singleton",
+        "//mediapipe/framework/port:statusor",
+    ],
+    visibility = ["//visibility:public"],
+)
+
 cc_library(
     name = "resource_util",
     srcs = select({
-        "//conditions:default": ["resource_util.cc"],
+        "//conditions:default": ["resource_util_unity.cc"],
         "//mediapipe:android": ["resource_util_android.cc"],
         "//mediapipe:ios": ["resource_util_apple.cc"],
         "//mediapipe:macos": ["resource_util.cc"],
@@ -173,6 +183,7 @@ cc_library(
         "@com_google_absl//absl/strings",
     ] + select({
         "//conditions:default": [
+            ":asset_manager",
             "//mediapipe/framework/deps:file_path",
             "//mediapipe/framework/port:file_helpers",
             "@com_google_absl//absl/flags:flag",
diff --git a/mediapipe/util/asset_manager.h b/mediapipe/util/asset_manager.h
new file mode 100644
index 0000000..bd47f39
--- /dev/null
+++ b/mediapipe/util/asset_manager.h
@@ -0,0 +1,46 @@
+// Copyright 2019 The MediaPipe Authors.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#ifndef MEDIAPIPE_UTIL_ASSET_MANAGER_H_
+#define MEDIAPIPE_UTIL_ASSET_MANAGER_H_
+
+#include <string>
+#include <vector>
+
+#include "mediapipe/framework/port/singleton.h"
+#include "mediapipe/framework/port/statusor.h"
+
+namespace mediapipe {
+
+// see mediapipe/util/android/asset_manager_util.h
+class AssetManager {
+ public:
+  AssetManager(const AssetManager&) = delete;
+  AssetManager& operator=(const AssetManager&) = delete;
+
+  // Reads a file into output. Returns true on success, false otherwise.
+  bool ReadFile(const std::string& filename, std::string* output);
+
+  ::mediapipe::StatusOr<std::string> CachedFileFromAsset(const std::string& asset_path);
+
+ private:
+  // Private constructor since this class is meant to be a singleton.
+  AssetManager() = default;
+
+  friend class Singleton<AssetManager>;
+};
+
+}  // namespace mediapipe
+
+#endif  // MEDIAPIPE_UTIL_ASSET_MANAGER_H_
diff --git a/mediapipe/util/resource_util_unity.cc b/mediapipe/util/resource_util_unity.cc
new file mode 100644
index 0000000..62544ed
--- /dev/null
+++ b/mediapipe/util/resource_util_unity.cc
@@ -0,0 +1,20 @@
+#include "mediapipe/util/asset_manager.h"
+#include "mediapipe/util/resource_util.h"
+#include "mediapipe/framework/port/singleton.h"
+#include "mediapipe/framework/port/ret_check.h"
+
+namespace mediapipe {
+
+::mediapipe::StatusOr<std::string> PathToResourceAsFile(
+    const std::string& path) {
+  return Singleton<AssetManager>::get()->CachedFileFromAsset(path);
+}
+
+::mediapipe::Status GetResourceContents(const std::string& path,
+                                        std::string* output) {
+  RET_CHECK(Singleton<AssetManager>::get()->ReadFile(path, output))
+    << "could not read asset: " << path;
+  return mediapipe::OkStatus();
+}
+
+}  // namespace mediapipe
